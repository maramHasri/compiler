2025-05-31 14:54:25:517 grammar LogManager.java:25 before: (LEXER_GRAMMAR MyGrammar (RULES (RULE IMPORT (BLOCK (ALT 'import'))) (RULE FROM (BLOCK (ALT 'from'))) (RULE AS (BLOCK (ALT 'as'))) (RULE CLASS (BLOCK (ALT 'class'))) (RULE EXPORT (BLOCK (ALT 'export'))) (RULE COMPONENT (BLOCK (ALT '@Component'))) (RULE SELECTOR (BLOCK (ALT 'selector'))) (RULE TEMPLATE (BLOCK (ALT 'template'))) (RULE STYLES (BLOCK (ALT 'styles'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACK (BLOCK (ALT '['))) (RULE RBRACK (BLOCK (ALT ']'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE SEMI (BLOCK (ALT ';'))) (RULE BACKTICK_STRING (BLOCK (ALT '`' (* (BLOCK (ALT .))) '`'))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT .))) '\''))) (RULE DOUBLE_QUOTE_STRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE IDENT (BLOCK (ALT [a-zA-Z_$] (* (BLOCK (ALT [a-zA-Z0-9_$])))))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
2025-05-31 14:54:25:536 grammar LogManager.java:25 after: (LEXER_GRAMMAR MyGrammar (RULES (RULE IMPORT (BLOCK (ALT 'import'))) (RULE FROM (BLOCK (ALT 'from'))) (RULE AS (BLOCK (ALT 'as'))) (RULE CLASS (BLOCK (ALT 'class'))) (RULE EXPORT (BLOCK (ALT 'export'))) (RULE COMPONENT (BLOCK (ALT '@Component'))) (RULE SELECTOR (BLOCK (ALT 'selector'))) (RULE TEMPLATE (BLOCK (ALT 'template'))) (RULE STYLES (BLOCK (ALT 'styles'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACK (BLOCK (ALT '['))) (RULE RBRACK (BLOCK (ALT ']'))) (RULE COLON (BLOCK (ALT ':'))) (RULE COMMA (BLOCK (ALT ','))) (RULE DOT (BLOCK (ALT '.'))) (RULE EQUALS (BLOCK (ALT '='))) (RULE SEMI (BLOCK (ALT ';'))) (RULE BACKTICK_STRING (BLOCK (ALT '`' (* (BLOCK (ALT .))) '`'))) (RULE STRING (BLOCK (ALT '\'' (* (BLOCK (ALT .))) '\''))) (RULE DOUBLE_QUOTE_STRING (BLOCK (ALT '"' (* (BLOCK (ALT .))) '"'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE IDENT (BLOCK (ALT [a-zA-Z_$] (* (BLOCK (ALT [a-zA-Z0-9_$])))))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))))
